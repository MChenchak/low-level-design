package linked_list;

public abstract class LinkedList<T> {

    public final int FIND_OK = 1; //find() нашла узел с заданным значением
    public final int FIND_NIL = 0; //find() не нашла узел с заданным значением

    public final int GET_OK = 1; //сгккуте содержит ссылку на существующий узел
    public final int FIND_ERR = 2; //список пустой

    private Node<T> current;
    private Node<T> head;
    private Node<T> tail;


    // конструктор
    // постусловие: создан новый связный список
    public abstract LinkedList<T> LinkedList();

    //Команды

    //предусловие: список не пустой
    // постусловие: курсор ссылается на первый узел списка
    public abstract void head();

    //предусловие: список не пустой
    // постусловие: курсор ссылается на последний узел списка
    public abstract void tail();

    //предусловие: курсор содержит ссылку на существующий узел и у этого узла есть ссылка на следующий узел
    // постусловие: курсор ссылается на следующий узел
    public abstract void right();

    //предусловие: курсор содержит ссылку на существующий узел
    //постусловие: "next" текущего узла - вставленный узел
    public abstract void putRight();

    //предусловие: курсор содержит ссылку на существующий узел
    //постусловие: "prev" текущего узла - вставленный узел
    public abstract void putLeft();

    //предусловие: курсор содержит ссылку на существующий узел
    //постусловие: курсор содержит ссылку на "next" удаленного узла, если "next" существует, иначе "prev", иначе null
    public abstract void remove();

    // постусловие: из списка удалятся все значения
    public abstract void clear();

    // постусловие: добавлен новый узел. размер списка увеличился на 1
    public abstract void addTail(T val);

    //предусловие: курсор содержит ссылку на существующий узел
    //постусловие: значение текущего узна изменено
    public abstract void replace(T val);

    //предусловие: курсор содержит ссылку на существующий узел
    //постусловие: курсор содержит ссылку на найденный узел, иначе ссылка остается прежней
    public abstract void find(T val);

    public abstract void removeAll();


    //запросы

    //предусловие: курсор содержит ссылку на существующий узел
    public abstract T get();

    public abstract int size();

    public abstract boolean isHead();

    public abstract boolean isTail();

    public abstract boolean isValue();

    //дополнительные запросы:
    public abstract T getTail();

}

//2.2. Почему операция tail не сводима к другим операциям (если исходить из эффективной реализации)?
//    - проще хранить ссылку на последний элемент в отдельной переменной и при необходимости обращаться к ней

//2.3. Операция поиска всех узлов с заданным значением, выдающая список таких узлов, уже не нужна. Почему?
// - поиск элементов по значению осуществляется относительно текущего элемента. интересует только есть ли искомый элемент правее